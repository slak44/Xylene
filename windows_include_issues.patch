diff --git a/include/termcolor/termcolor.hpp b/include/termcolor/termcolor.hpp
index 4659afd..6be0a25 100644
--- a/include/termcolor/termcolor.hpp
+++ b/include/termcolor/termcolor.hpp
@@ -26,18 +26,6 @@
 #endif
 
 
-// This headers provides the `isatty()`/`fileno()` functions,
-// which are used for testing whether a standart stream refers
-// to the terminal. As for Windows, we also need WinApi funcs
-// for changing colors attributes of the terminal.
-#if defined(TERMCOLOR_OS_MACOS) || defined(TERMCOLOR_OS_LINUX)
-#   include <unistd.h>
-#elif defined(TERMCOLOR_OS_WINDOWS)
-#   include <io.h>
-#   include <windows.h>
-#endif
-
-
 #include <iostream>
 #include <cstdio>
 
@@ -45,6 +33,18 @@
 
 namespace termcolor
 {
+  
+  // This headers provides the `isatty()`/`fileno()` functions,
+  // which are used for testing whether a standart stream refers
+  // to the terminal. As for Windows, we also need WinApi funcs
+  // for changing colors attributes of the terminal.
+  #if defined(TERMCOLOR_OS_MACOS) || defined(TERMCOLOR_OS_LINUX)
+  #   include <unistd.h>
+  #elif defined(TERMCOLOR_OS_WINDOWS)
+  #   include <io.h>
+  #   include <windows.h>
+  #endif
+  
     // Forward declaration of the `_internal` namespace.
     // All comments are below.
     namespace _internal
@@ -444,12 +444,13 @@ namespace termcolor
         inline
         bool is_atty(const std::ostream& stream)
         {
+          return true;
             FILE* std_stream = get_standard_stream(stream);
 
         #if defined(TERMCOLOR_OS_MACOS) || defined(TERMCOLOR_OS_LINUX)
-            return ::isatty(fileno(std_stream));
+            return isatty(fileno(std_stream));
         #elif defined(TERMCOLOR_OS_WINDOWS)
-            return ::_isatty(_fileno(std_stream));
+            return _isatty(_fileno(std_stream));
         #endif
         }
 
@@ -457,7 +458,7 @@ namespace termcolor
     #if defined(TERMCOLOR_OS_WINDOWS)
         //! Change Windows Terminal colors attribute. If some
         //! parameter is `-1` then attribute won't changed.
-        void win_change_attributes(std::ostream& stream, int foreground, int background)
+        inline void win_change_attributes(std::ostream& stream, int foreground, int background)
         {
             // yeah, i know.. it's ugly, it's windows.
             static WORD defaultAttributes = 0;
